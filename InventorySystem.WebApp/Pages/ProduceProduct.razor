@page "/produce"

@inject IProduceProductUseCase ProduceProductUseCase
@inject IValidateEnoughInventoriesForProducingUseCase ValidateEnoughInventoriesForProducingUseCase

<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>

<h3>Produce Product</h3>
<br />
@if (produceViewModel != null)
{
    <EditForm Model="produceViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="po">Production Number</label>
            <InputText id="po" @bind-Value="produceViewModel.ProductionNumber" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="inv">Product to Produce</label>
            <ViewProductsComponent OnSelectProduct="OnSelectProduct"
                                  DisplaySearchResult="true"></ViewProductsComponent>
            <InputText id="inv" class="form-control" @bind-Value="produceViewModel.ProductName" disabled></InputText>
            <input type="hidden" value="@selectedProduct?.ProductId" />
            @if (selectedProduct != null)
            {
                <text>Cost:</text>
                @selectedProduct?.Price.ToString("c")
                ;
            }

        </div>

        <div class="form-group">
            <label for="qty">Quantiry</label>
            <InputNumber id="qty" @bind-Value="produceViewModel.QuantityToProduce" class="form-control"></InputNumber>
        </div>
        <br />

        <button type="submit" class="btn btn-primary">Purchase</button>


    </EditForm>
}
@code {
    private ProduceViewModel produceViewModel = new ProduceViewModel();
    private Product selectedProduct;
    private string errorMessage;
    private async Task OnValidSubmit()
    {
        if(! await ValidateEnoughInventoriesForProducingUseCase
         .ExecuteAsync(this.selectedProduct,this.produceViewModel.QuantityToProduce))
        {
            errorMessage = "error";
            return;
        }
        else
        {
            errorMessage = "empty";
        }

        
        await ProduceProductUseCase.ExecuteAsync(
        this.produceViewModel.ProductionNumber,
        this.selectedProduct,
        this.produceViewModel.QuantityToProduce,
        "frank"
        );
        this.produceViewModel = new ProduceViewModel();
        this.selectedProduct = null;
    }

    public void OnSelectProduct(Product product)
    {
        this.selectedProduct = product;
        produceViewModel.ProductId = product.ProductId;
        produceViewModel.ProductName = product.ProductName;
    }

}
